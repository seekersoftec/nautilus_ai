# generators/signals_threshold.py

from nautilus_ai.strategies.itb.generators.generator import SignalGenerator, register_generator

"""
Signal generation is based on processing a relatively small number of highly informative 
(point-wise) scores generated by ML algorithms. The goal is to apply some rules to these
scores and generate the final signal buy, sell or do nothing. Such rules are described via
a number of parameters. These parameters are chosen to optimize the final trade performance
(and not precision in ML algorithms). Thus we have two sets of functions: 1) computing rules with
given parameters, and 2) finding optimal parameters of rules (currently via grid search).
"""

#
# Signal rules
#


@register_generator("threshold_rule")
class ThresholdRule(Generator):
    """
    Apply rules based on thresholds and generate trade signal buy, sell or do nothing.

    Returns signals in two pre-defined columns: 'buy_signal_column' and 'sell_signal_column'
    """
    def generate(self, df, last_rows=0, **kwargs):
        parameters = self.config.get("parameters", {})

        columns = self.config.get("columns")
        if not columns:
            raise ValueError(f"The 'columns' parameter must be a non-empty string. {type(columns)}")
        elif isinstance(columns, list):
            columns = [columns]

        buy_signal_column = self.config.get("names")[0]
        sell_signal_column = self.config.get("names")[1]

        df[buy_signal_column] = \
            (df[columns] >= parameters.get("buy_signal_threshold"))
        df[sell_signal_column] = \
            (df[columns] <= parameters.get("sell_signal_threshold"))

        return df, [buy_signal_column, sell_signal_column]



@register_generator("threshold_rule2")
class ThresholdRule2(Generator):
    """
    Assume using difference combination with negative sell scores
    """
    def generate(self, df, last_rows=0, **kwargs):
        parameters = self.config.get("parameters", {})

        columns = self.config.get("columns")
        if not columns:
            raise ValueError(f"The 'columns' parameter must be a non-empty string. {type(columns)}")
        elif not isinstance(columns, list) or len(columns) != 2:
            raise ValueError(f"'columns' parameter must be a list with two column names. {type(columns)}")

        score_column = columns[0]
        score_column_2 = columns[1]

        buy_signal_column = self.config.get("names")[0]
        sell_signal_column = self.config.get("names")[1]

        # Both buy scores are greater than the corresponding thresholds
        df[buy_signal_column] = \
            (df[score_column] >= parameters.get("buy_signal_threshold")) & \
            (df[score_column_2] >= parameters.get("buy_signal_threshold_2"))

        # Both sell scores are smaller than the corresponding thresholds
        df[sell_signal_column] = \
            (df[score_column] <= parameters.get("sell_signal_threshold")) & \
            (df[score_column_2] <= parameters.get("sell_signal_threshold_2"))

        return df, [buy_signal_column, sell_signal_column]

